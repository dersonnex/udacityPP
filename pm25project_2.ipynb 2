{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 中国五个城市PM 2.5数据分析"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 简介"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PM2.5的检测数值通常包含在环境部门和公司的空气质量报告中。 PM2.5是指大气颗粒物（PM），其直径小于或等于2.5微米。在环境科学中，特指悬浮在空气中的固体颗粒或液滴，是空气污染的主要来源之一。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 项目完成指南\n",
    "\n",
    "\n",
    "本项目中的数据分析流程和分析中使用的函数已经给出，如果你对Python不是很熟悉，通过前面课程对变量、模块、方法的简单掌握，你也可以完成本项目，请不要担心！请将你的重心放到观察数据、提出问题和解答问题上。\n",
    "\n",
    "<span style=\"color:blue\">你在本项目中的目标是对下面标记为蓝色的问题进行回答。\n",
    "\n",
    "> **小贴士**: 像这样的引用部分旨在为学员提供实用指导，帮助学员了解并使用 Jupyter notebook\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## 观察数据\n",
    "\n",
    "本数据包含有中国五个城市(北京、上海、成都、广州、沈阳)从2010/1/1-2015/12/31的空气和气象数据。数据中的缺失值被标记为NaN。数据列名的含义如下：\n",
    "\n",
    "```\n",
    "No: 行号\n",
    "year: 年份\n",
    "month: 月份\n",
    "day: 日期\n",
    "hour: 小时\n",
    "season: 季节\n",
    "PM: PM2.5浓度 (ug/m^3)\n",
    "DEWP: 露点 (摄氏温度) 指在固定气压之下，空气中所含的气态水达到饱和而凝结成液态水所需要降至的温度。\n",
    "TEMP: Temperature (摄氏温度)\n",
    "HUMI: 湿度 (%)\n",
    "PRES: 气压 (hPa)\n",
    "cbwd: 组合风向\n",
    "Iws: 累计风速 (m/s)\n",
    "precipitation: 降水量/时 (mm)\n",
    "Iprec: 累计降水量 (mm)\n",
    "```\n",
    "\n",
    "其中与PM2.5浓度相关的数据包含有多列，其中`PM_US Post` 的数据来源是[US Department of State Air Quality Monitoring Program](http://www.stateair.net/web/post/1/4.html)。其他PM相关的数据来源于中国生态环境部在五个城市设置的不同站点，比如`PM_Xuhui`位于上海市徐汇区，`PM_Dongsihuan`位于北京市的东四环。\n",
    "\n",
    "本项目中的数据可以从[Kaggle网站](https://www.kaggle.com/uciml/pm25-data-for-five-chinese-cities)上下载到，该数据也被收录于[UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets/PM2.5+Data+of+Five+Chinese+Cities#)。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "首先我们先运行下面的代码单元格来加载你将在分析中使用的所有数据和模块。\n",
    "\n",
    "在此处我们提供了一个叫做`helper_functions`的模块，其中包含`filter_data`, `reading_stats`, `univariate_plot`几个函数，你无需了解它们的实现方式，按照我们在`turtle`中学到的方法，可以直接当做黑匣子来使用。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "from helper_functions import filter_data, reading_stats, univariate_plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 数据整理\n",
    "\n",
    "由于项目难度设定的问题，我们不希望你在现在了解过多数据评估和清理的细节，这些都可以在今后靠你的学习和掌握来完成。所以在此处对所有数据的清理步骤我会提供给你现成的代码，你可以直接运行下面的“数据整理”本部分的代码。\n",
    "\n",
    "在这部分中，我们按照下面思路进行了数据整理：由于五个数据文件中都包含`PM_US Post`一列，并且该列的缺失值相对于其他列缺失值较小，因此在下面的分析中我们仅保留该列数据作为PM 2.5的关键数据。在下面的代码中我们也预先对所有城市的season进行了转换，并为数据添加了一个`city`列，便于对不同城市进行对比分析。\n",
    "\n",
    "其他的气象数据我们暂时先不考虑，故进行了删除。\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "files = ['BeijingPM20100101_20151231.csv',\n",
    "       'ChengduPM20100101_20151231.csv',\n",
    "       'GuangzhouPM20100101_20151231.csv',\n",
    "       'ShanghaiPM20100101_20151231.csv',\n",
    "       'ShenyangPM20100101_20151231.csv']\n",
    "\n",
    "out_columns = ['No', 'year', 'month', 'day', 'hour', 'season', 'PM_US Post']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a void dataframe\n",
    "df_all_cities = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# iterate to write diffrent files\n",
    "for inx, val in enumerate(files):\n",
    "    df = pd.read_csv(val)\n",
    "    df = df[out_columns]\n",
    "    # create a city column\n",
    "    df['city'] = val.split('P')[0]\n",
    "    # map season \n",
    "    df['season'] = df['season'].map({1:'Spring', 2:'Summer', 3:'Autumn', 4: 'Winter'})\n",
    "    # append each file and merge all files into one\n",
    "    df_all_cities = df_all_cities.append(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace the space in variable names with '_'\n",
    "df_all_cities.columns = [c.replace(' ', '_') for c in df_all_cities.columns]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "我们来简单查看一下处理后的数据，观察数据是否符合我们的要求："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>season</th>\n",
       "      <th>PM_US_Post</th>\n",
       "      <th>city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Winter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beijing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Winter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beijing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beijing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Winter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beijing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Winter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Beijing</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   No  year  month  day  hour  season  PM_US_Post     city\n",
       "0   1  2010      1    1     0  Winter         NaN  Beijing\n",
       "1   2  2010      1    1     1  Winter         NaN  Beijing\n",
       "2   3  2010      1    1     2  Winter         NaN  Beijing\n",
       "3   4  2010      1    1     3  Winter         NaN  Beijing\n",
       "4   5  2010      1    1     4  Winter         NaN  Beijing"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_all_cities.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "整理后的列名含义如下：\n",
    "\n",
    "\n",
    "```\n",
    "No: 行号\n",
    "year: 年份\n",
    "month: 月份\n",
    "day: 日期\n",
    "hour: 小时\n",
    "season: 季节\n",
    "PM_US_Post: PM2.5浓度 (ug/m^3)\n",
    "city: 城市名\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 提出问题\n",
    "\n",
    "在此项目中，你将以一名数据分析师的身份执行数据的探索性分析。你将了解数据分析过程的基本流程。但是在你开始查看数据前，请先思考几个你需要理解的关于PM2.5的问题，例如，如果你是一名环境工作者，你会想要获得什么类型的信息来了解不同城市的环境情况？如果你是一名生活在这个城市的普通人，你可以思考PM 2.5的变化会有什么样的周期性规律？选择什么时段出行空气质量最佳？"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"color:blue\">**问题 1**：至少写下一个你感兴趣的问题，请确保这些问题能够由现有的数据进行回答。\n",
    "\n",
    "（问题示例：1. 2012年-2015年上海市PM 2.5的数据在不同的月份有什么变化趋势？2. 哪个城市的PM 2.5的含量较低？）\n",
    "\n",
    "  **问题一**： *广州的2012-2015年份的PM2.5是多少？*\n",
    "\n",
    "  **答案**： \n",
    "\n",
    "【本题考察点：数据分析过程 - 提出问题】"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **小贴士**: 下面是代码框(code cell). 运行代码框的方法与编辑上方的 Markdown 框的格式类似，你只需点击代码框，按下键盘快捷键 **Shift** + **Enter** 或 **Shift** + **Return** ，或者你也可先选择代码框，然后点击工具栏的 **运行** 按钮来运行代码。运行代码框时，相应单元左侧的信息会出现星号，即 `In [*]:`，若代码执行完毕，星号则会变为某个数字，如 `In [1]`。如果代码运行后有输出结果，输出将会以 `Out [1]:` 的形式出现，其中的数字将与 \"In\" 中的数字相对应。如果代码运行后没有输出结果，则不会有`Out [1]`出现。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 数据筛选\n",
    "\n",
    "接下来我们将会对你在前面提出的问题进行更进一步的思考。\n",
    "\n",
    "`df_all_cities`是我们建立的一个包含所有数据的Pandas Dataframe，考虑到我们的分析目标，我们可能会需要提取部分数据来针对我们感兴趣的具体问题进行分析。为了方便大家对数据进行探索，我们定义了一个`reading_stats`的函数，通过输入不同的条件(conditions),该函数可以帮助我们筛选出这部分的数据。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "在使用中，我们只需要调用`reading_stats`即可，我们在这个函数中调用了`filter_data`函数，因此并不需要我们直接操作`filter_data`函数。下面是对于该函数的一些提示。\n",
    "\n",
    "`reading_stats`函数中包含有3个参数：\n",
    "\n",
    "1. 第一个参数（必须）：需要被加载的 dataframe，数据将从这里开始分析。\n",
    "2. 第二个参数（可选）：数据过滤器，可以根据一系列输入的条件(conditions)来过滤将要被分析的数据点。过滤器应作为一系列条件提供，每个条件之间使用逗号进行分割，并在外侧使用`\"\"`将其定义为字符串格式，所有的条件使用`[]`包裹。每个单独的条件应该为包含三个元素的一个字符串：`'<field> <op> <value>'`（元素与元素之间需要有一个空格字符来作为间隔），`<op>`可以使用以下任意一个运算符：>、<、>=、<=、==、!=。数据点必须满足所有条件才能计算在内。例如，[\"city == 'Beijing'\", \"season == 'Spring'\"] 仅保留北京市，季节为春天的数据。在第一个条件中, `<field>`是city，`<op>`是 ==, `<value>`是'Beijing',因为北京为字符串，所以加了单引号，它们三个元素之间分别添加一个空格。最后，这个条件需要使用双引号引用起来。这个例子中使用了两个条件，条件与条件之间使用逗号进行分割，这两个条件最后被放在`[]`之中。\n",
    "3. 第三个参数（可选）：详细数据，该参数决定我们是否打印被选择的数据的详细统计信息。如果verbose = True，会自动打印数据的条数，以及四分位点，并绘制箱线图。如果verbose = False, 则只会返回筛选后的dataframe，不进行打印。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "下面我们会使用上海市2012年-2015年的数据进行举例，探索数据中的一些问题。要获取这部分的数据，我们可以使用下面的函数来实现。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/workspace/helper_functions.py:69: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  pm_qtiles = data['PM_US_Post'].quantile([.25, .5, .75]).as_matrix()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 35064 readings (13.34%) matching the filter criteria.\n",
      "The average readings of PM 2.5 is 52.88 ug/m^3.\n",
      "The median readings of PM 2.5 is 41.00 ug/m^3.\n",
      "25% of readings of PM 2.5 are smaller than 26.00 ug/m^3.\n",
      "25% of readings of PM 2.5 are larger than 67.00 ug/m^3.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe8e05512b0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_test = reading_stats(df_all_cities, [\"city == 'Shanghai'\", \"year >= 2012\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 35064 entries, 0 to 35063\n",
      "Data columns (total 8 columns):\n",
      "No            35064 non-null int64\n",
      "year          35064 non-null int64\n",
      "month         35064 non-null int64\n",
      "day           35064 non-null int64\n",
      "hour          35064 non-null int64\n",
      "season        35064 non-null object\n",
      "PM_US_Post    33962 non-null float64\n",
      "city          35064 non-null object\n",
      "dtypes: float64(1), int64(5), object(2)\n",
      "memory usage: 2.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df_test.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"color:blue\">**问题2a**: 要回答你前面的提出的问题，你需要筛选符合哪些条件的数据？请具体说明。\n",
    "\n",
    "**答案**：*2012-2015年广州市的PM2.5数据*\n",
    "\n",
    "<span style=\"color:blue\">**问题2b**：请使用上面给出的`reading_stats`函数来调用你所需要的数据，请在下面填写合适的条件（conditions）。提示：对应此函数的第二个参数。\n",
    "\n",
    "**答案**：*[\"city == 'Guangzhou'\", \"year >= 2012\"]*\n",
    "\n",
    "【本题考察点：数据分析中的逻辑思维】"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "从这里的分析我们可以看出， 上海市2012年-2015年的PM2.5数据有35064条记录，其中PM_US Post站点的记录有33962条，缺失的数量并不是很大。因为Pandas（我们使用的第三方库）在计算统计数字的时候，会自动排除掉缺失的数值，因此在这里我们没有对缺失值进行任何处理。\n",
    "\n",
    "上海市在2012-2015年期间PM 2.5的值主要分布在0-125 ug/m^3这个区间，平均数值为52.88 ug/m^3，中位数为41.00 ug/m^3，有25%的读数小于26.00 ug/m^3，有25%的读数大于67.00 ug/m^3。\n",
    "\n",
    "下面请你对你所感兴趣的问题进行分析，并回答下面的问题：（提示: 你需要对前面提出的两个问题都进行思考。）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 问题1 广州的2012-2015年份的PM2.5是多少？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 35064 readings (13.34%) matching the filter criteria.\n",
      "The average readings of PM 2.5 is 50.17 ug/m^3.\n",
      "The median readings of PM 2.5 is 42.00 ug/m^3.\n",
      "25% of readings of PM 2.5 are smaller than 24.00 ug/m^3.\n",
      "25% of readings of PM 2.5 are larger than 67.00 ug/m^3.\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 35064 entries, 0 to 35063\n",
      "Data columns (total 8 columns):\n",
      "No            35064 non-null int64\n",
      "year          35064 non-null int64\n",
      "month         35064 non-null int64\n",
      "day           35064 non-null int64\n",
      "hour          35064 non-null int64\n",
      "season        35063 non-null object\n",
      "PM_US_Post    31455 non-null float64\n",
      "city          35064 non-null object\n",
      "dtypes: float64(1), int64(5), object(2)\n",
      "memory usage: 2.1+ MB\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/workspace/helper_functions.py:69: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  pm_qtiles = data['PM_US_Post'].quantile([.25, .5, .75]).as_matrix()\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWQAAAEXCAYAAACarT5PAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAFypJREFUeJzt3XmYbHV95/H3h3sDXBZFljByMVz0uoRoRMaJe0IUFRDFqBNFNKAY4jMGicMEt6iYMc64xAzDxG1c2BxRcUNFR2VUdGYEgSCgoLYswgVl31G2b/44v5a6Tfftvkt3/Rrer+epp/vs3/pVnU+d86uqU6kqJEnjt9G4C5AkDQxkSeqEgSxJnTCQJakTBrIkdcJAlqROGMiLVJKjk7xjgbb1Z0kuTXJzksctxDbHJcn2SU5NclOSf5xm+rIkX0pyQ5LPJNk/yddHpleSlQtb9Wr1XZxkjznOe2CS7813TZo7A3k9tR3gthZW1yX5SpKHjLuuURsgJN4L/HVVbVFV/zLD+m9pbbAqyfuSLGnTLk5ye5JtpyxzdltuxQw1vzfJz1owXpDkL9Zw/3ZPcnfb/uTtgHW8rwcDVwMPqKrDppn+ImB7YJuq+vdV9YmqetYMdS3Yi+Z8S3JEkuPHXcd9nYG8YTy3qrYAHgz8CjhqzPVsaDsBP5plnse2NngG8FLgL0emXQTsNzmQ5DHAslnWdwvwXOCBwAHAkUmevIb5L28vGJO3Y2ZZ/0x2An5cM39jaifgp1V15zquf86SLJ3vbagvBvIGVFW/Bk4Edpkcl+SBSY5NclWSS5L8XZKN2rQPJDlxZN53JTklg92TXJbkTUmubkea+8+07SR/mWQiybVJTkqyQxt/apvlh+3I8cXTLLtRq+uSJFe2eh+YZJMkNwNL2vI/n0MbXAB8F3j0yOjjgNEj3AOAY2dZz9uq6oKquruqTmvrfNJs25+LJE9O8oPW7fCDyaBPcnSr7fDWVntMWe7twFuBF7fpB8102p/kYGD/kXV9qY3fIcln2/PhoiSvHVnmiCQnJjk+yY3Age2xeUOSnye5Jsmnk2w9sszL2+N2TZI3z3K/t2nPjRuTnA48bMr0IzN0Td2Y5MwkT2vj9wTeNHK/f9jGvyLJ+e0s5sIkfzXHh0AzqSpv63EDLgb2aP9vBhwDHDsy/Vjgi8CWwArgp8BBI/P/FDgQeBrDqfKObdruwJ3A+4BNgD9hOGp8ZJt+NPCO9v/T27K7tXmPAk4dqaGAlWu4D68EJoCHAlsAnwOOW4vlfzud4cXolyP38WJgD+AnwO8zhPulDEeaBayYQxsvA64A9pxh+u7A7QxnJxcB/wRsPsO8WwPXAS8HljIcuV/H0AWxWrvOsPwRwPEjwwcC35uhLVZbF8MB0JkMob5xa+8LgWePrPsO4Plt3mXA3wDfB3Zsj+2HgE+OtPXNwB+3ae9rz5k9Zqj9BODTwOYML5irptT+MmCb1i6Htcdx0+nudxv3HIZQD8Pz81Zgt3Hvk4v5NvYCFvutBc7NwPVtZ7gceEybtgT4DbDLyPx/BXx7ZPiPgGuBS4D9Rsbv3ta3+ci4TwNvaf//dmcHPgq8e2S+LdqOvaINzxaopwD/YWT4kW35pXNcvoAbGYLt58A7gI1G2mcP4O+A/wLsCXyj7fRzDeRjgK8BmWH6v2nhtBGwM3Aq8KEZ5n05cPqUcf8fOHBqu86w/GrBxNoF8hOAX0xZ3xuBj4+s+9Qp088HnjEy/ODJx4Yh2E8YmbY5wwvTvQK5PRfvAB41Mu6do7VPs8x1DF1R97rfM8z/BeDQce6Pi/1mH9WG8fyq+mZ7I2tf4DtJdmHYOTdmCNtJlwDLJweq6vQkFwK/yxC4o66rqlumLLvDNNvfAThrZJ03J7mmbefiOdS/wzQ1LmV482rVHJaH4choYg3Tj2MIyp2ZpbtiVJL3MBzN/Wm1vX6qqvolw9EcwEVJDge+wvDiN9XU+wpTHpN5tBOwQ5LrR8YtYeiOmXTpNMt8PsndI+PuYnhsdhidv6puaY/7dLZjeExH179aOyQ5DHhVW28BDwBWezN2yvx7AW8DHsHwYrgZcO5M82t29iFvQFV1V1V9jmGHeSpDN8IdDDvVpN9jJOSSvIbhdPNy4PApq3xQks2nLHv5NJu+fHQbbZltmHuYrrZ8286dDF0AG0RVXcLQnbA3Q5fIrFqf7V7As6rqxrXZHMNp9HSm3leY8phsQFNfQC4FLqqqrUZuW1bV3rMss9eUZTatqlUM3Ti//URPks0YHvfpXMXwmI5+Auj3RpZ9GvB64M+BB1XVVsAN3NOOq9WVZBPgswyfwNm+zX8yM7e75sBA3oDam3H7Ag8Czq+quxiOev8hyZZJdgL+I3B8m/8RDKf3L2M4lT48ya5TVvv2JBu3HWYf4DPTbPp/Aa9IsmvbUd4JnFZVF7fpv2Lor5zJJ4HXJdk5yRZt+U/Vhv8kwUHA06cc9U8ryRsZPq3xzKqa6ahvct7dk/xea/+HAP+Vod9+OicDj0jy0iRL25ucuwBfXqt7MjdT2/104MYkr8/weeYlSR6d5N+tYR0fZHj+7ASQZLv2HIPhDeR9kjw1ycbA3zPDPt2ei58DjkiyWTuDG/1o4JYMgX0VsDTJWxmOkEfvy4q0N6QZzvw2afPf2Y6Wp/34n+bOQN4wvtQ+jXAj8A/AAVU1+TGxQxjejLsQ+B5DeH4sw0eajgfeVVU/rKqfMbyTfVwLVRhOw69jOKr7BPDqGj7FsJqqOgV4C8MRyxUMb7S8ZGSWI4Bjklyf5M+nqf9j3NOlcBHw61b3BlVVP6+qM+Y4+zsZjuB+lns+W/ymyYlt+GltcDeGfuBbgP8HnAe8duoKWw3XMLywHQZcw3BWsk9VXb0u92kWHwV2ae3+hRaKzwV2ZWjnq4GPMHy0byZHAicBX09yE8MbfE9o9+VHwGsYnlNXMDxXLlvDuv6a4f2FXzL0b398ZNr/Br7K8CbzJQzPgdHujckDgWuSnFVVNzG08afbdl/a6tR6yAzdchqzJLszvImy47hrkbQwPEKWpE4YyJLUCbssJKkTHiFLUifW6osh2267ba1YsWKeSpGk+6Yzzzzz6qrabrb51iqQV6xYwRlnzPVTS5IkgCRTvx06LbssJKkTBrIkdcJAlqROGMiS1AkDWZI6YSBLUicMZEnqhIEsSZ0wkCWpEwayJHXCQJakThjIktQJA1mSOmEgS1InDGRJ6oSBLEmdMJAlqRMGsiR1wkCWpE6s1W/qaXVHHXUUExMT4y5jVqtWrQJg+fLlY65k/q1cuZJDDjlk3GVI68RAXg8TExOcfd753LXZ1uMuZY2W3HoDAL/8zX374V5y67XjLkFaL/ftPXQB3LXZ1tz2qL3HXcYaLbvgZIDu61xfk/dTWqzsQ5akThjIktQJA1mSOmEgS1InDGRJ6oSBLEmdMJAlqRMGsiR1wkCWpE4YyJLUCQNZkjphIEtSJwxkSeqEgSxJnTCQJakTBrIkdcJAlqROGMiS1AkDWZI6YSBLUicMZEnqhIEsSZ0wkCWpEwayJHXCQJakThjIktQJA1mSOmEgS1InDGRJ6oSBLEmdMJAlqRMGsiR1wkCWpE4YyJLUCQNZkjphIEtSJwxkSeqEgSxJnTCQJakTBrIkdcJAlqROLEggH3XUURx11FELsSlJ2qAWMr+WLsRGJiYmFmIzkrTBLWR+2WUhSZ0wkCWpEwayJHXCQJakThjIktQJA1mSOmEgS1InDGRJ6oSBLEmdMJAlqRMGsiR1wkCWpE4YyJLUCQNZkjphIEtSJwxkSeqEgSxJnTCQJakTBrIkdcJAlqROGMiS1AkDWZI6YSBLUicMZEnqhIEsSZ0wkCWpEwayJHXCQJakThjIktQJA1mSOmEgS1InDGRJ6oSBLEmdMJAlqRMGsiR1wkCWpE4YyJLUCQNZkjphIEtSJwxkSeqEgSxJnVi6EBtZtWoVt912G4ceeuhCbG7BTExMsNHtNe4y1Gz06xuZmLjpPvc803hNTEywbNmyBdnWrEfISQ5OckaSM6666qqFqEmS7pdmPUKuqg8DHwZ4/OMfv06Hg8uXLwfgyCOPXJfFu3XooYdy5oW/GncZau7e9AGsfOj297nnmcZrIc+47EOWpE4YyJLUCQNZkjphIEtSJwxkSeqEgSxJnTCQJakTBrIkdcJAlqROGMiS1AkDWZI6YSBLUicMZEnqhIEsSZ0wkCWpEwayJHXCQJakThjIktQJA1mSOmEgS1InDGRJ6oSBLEmdMJAlqRMGsiR1wkCWpE4YyJLUCQNZkjphIEtSJwxkSeqEgSxJnTCQJakTBrIkdcJAlqROGMiS1AkDWZI6YSBLUicMZEnqhIEsSZ0wkCWpEwayJHXCQJakThjIktSJpQuxkZUrVy7EZiRpg1vI/FqQQD7kkEMWYjOStMEtZH7ZZSFJnTCQJakTBrIkdcJAlqROGMiS1AkDWZI6YSBLUicMZEnqhIEsSZ0wkCWpEwayJHXCQJakThjIktQJA1mSOmEgS1InDGRJ6oSBLEmdMJAlqRMGsiR1wkCWpE4YyJLUCQNZkjphIEtSJwxkSeqEgSxJnTCQJakTBrIkdcJAlqROGMiS1AkDWZI6YSBLUicMZEnqhIEsSZ0wkCWpEwayJHXCQJakThjIktQJA1mSOmEgS1InDGRJ6sTScRew2C259VqWXXDyuMtYoyW3XgPQfZ3ra8mt1wLbj7sMaZ0ZyOth5cqV4y5hTlatuhOA5cvv62G1/aJ5TKTpGMjr4ZBDDhl3CZLuQ+xDlqROGMiS1AkDWZI6YSBLUicMZEnqhIEsSZ0wkCWpEwayJHXCQJakThjIktQJA1mSOmEgS1InDGRJ6oSBLEmdMJAlqRMGsiR1wkCWpE4YyJLUCQNZkjphIEtSJ1JVc585uQq4ZC23sS1w9Vou04PFWjdY+7hY+3gshtp3qqrtZptprQJ5XSQ5o6oeP68bmQeLtW6w9nGx9vFYzLVPZZeFJHXCQJakTixEIH94AbYxHxZr3WDt42Lt47GYa1/NvPchS5Lmxi4LSeqEgSxJnZi3QE6yZ5KfJJlI8ob52s6GkOQhSb6V5PwkP0pyaBu/dZJvJPlZ+/ugcdc6nSRLkvxLki+34Z2TnNbq/lSSjcdd43SSbJXkxCQXtLZ/0iJq89e158p5ST6ZZNNe2z3Jx5JcmeS8kXHTtnMG/73tt+ck2W18lc9Y+3vac+acJJ9PstXItDe22n+S5NnjqXrdzUsgJ1kC/DOwF7ALsF+SXeZjWxvIncBhVfX7wBOB17R63wCcUlUPB05pwz06FDh/ZPhdwD+1uq8DDhpLVbM7EvhaVT0KeCzDfei+zZMsB14LPL6qHg0sAV5Cv+1+NLDnlHEztfNewMPb7WDgAwtU40yO5t61fwN4dFX9IfBT4I0AbZ99CfAHbZn3tyxaNObrCPmPgImqurCqbgdOAPadp22tt6q6oqrOav/fxBAMyxlqPqbNdgzw/PFUOLMkOwLPAT7ShgM8HTixzdJr3Q8A/hj4KEBV3V5V17MI2rxZCixLshTYDLiCTtu9qk4Frp0yeqZ23hc4tgbfB7ZK8uCFqfTepqu9qr5eVXe2we8DO7b/9wVOqKrfVNVFwARDFi0a8xXIy4FLR4Yva+O6l2QF8DjgNGD7qroChtAGfnd8lc3ovwGHA3e34W2A60eesL22/UOBq4CPt+6WjyTZnEXQ5lW1Cngv8AuGIL4BOJPF0e6TZmrnxbbvvhL4avt/sdV+L/MVyJlmXPefr0uyBfBZ4G+q6sZx1zObJPsAV1bVmaOjp5m1x7ZfCuwGfKCqHgfcQofdE9Np/a37AjsDOwCbM5zqT9Vju89msTx/SPJmhu7GT0yOmma2LmufyXwF8mXAQ0aGdwQun6dtbRBJfochjD9RVZ9ro381ebrW/l45rvpm8BTgeUkuZugWejrDEfNW7VQa+m37y4DLquq0NnwiQ0D33uYAewAXVdVVVXUH8DngySyOdp80Uzsvin03yQHAPsD+dc+XKRZF7WsyX4H8A+Dh7V3njRk62k+ap22tt9bv+lHg/Kp638ikk4AD2v8HAF9c6NrWpKreWFU7VtUKhjb+P1W1P/At4EVttu7qBqiqXwKXJnlkG/UM4Md03ubNL4AnJtmsPXcma+++3UfM1M4nAX/RPm3xROCGya6NXiTZE3g98LyqunVk0knAS5JskmRnhjcmTx9HjeusqublBuzN8A7oz4E3z9d2NlCtT2U4tTkHOLvd9mbojz0F+Fn7u/W4a13Dfdgd+HL7/6EMT8QJ4DPAJuOub4aadwXOaO3+BeBBi6XNgbcDFwDnAccBm/Ta7sAnGfq672A4ijxopnZmOO3/57bfnsvwSZLeap9g6Cue3Fc/ODL/m1vtPwH2Gnfbr+3Nr05LUif8pp4kdcJAlqROGMiS1AkDWZI6YSBLUicMZEnqhIF8P5TkriRnt0tHfibJZm18JTluZL6lSa6avKznDOs6Isl/mjLu4iTbtv/f3C5TeU7b5hOmWcfRSS5q089K8qR1uE+7J3nyGqY/P8lb13a9U9axX/u67tou96Yktyd5+ZTx+460yxlJntrGb5fka+tTqxYnA/n+6baq2rWGS0feDry6jb8FeHSSZW34mcCqdd1IC9Z9gN1quFTiHqx+8ZdRf1tVuzJcz+JD67C53Rm+vjyTw4H3r8N6R+0JrFVQJnkZ8GyGy9AeluSZI5NPAR7b7vcraVfsq6qrgCuSPGU969UiYyDru8DKkeGvMlzOE2A/hm9KrasHA1dX1W8Aqurqqprt2gKnTtaTZNck3x+5EPnkRdRfm+THbfwJ7Qp9rwZe1442nza6wiSPAH5TVVe34aOTvGhk+s3t70ZJ3t+O6L+c5OTJ+dpXpHcFzmpnBcck+Xo7G3hBkncnOTfJ19p1UUiyB8PXkveuqgngWcDbk+za2uPmuuebWZuz+oVwvgDsP9eG1n2DgXw/1i6EsxfDV2QnncBwPYBNgT9kuAzpuvo68JAkP21B9ydzWOa5I/UcC7y+HV2fC7ytjX8D8Lg2/tVVdTHwQYaLw+9aVd+dss6nAGfNYdsvAFYAjwFeBYx2nTwO+OFIgD6M4YVrX+B44FtV9RjgtjaeqvpmVT2zqm5pw1dW1ZOr6uzJlSb5syQXAF9hOEqedAaw2guL7vsM5PunZUnOZtjpf0G7SDxAVZ3DEEr7ASfPYV0zffe+qupm4N8y/PLEVcCnkhw4w/zvaTUdDByU5IHAVlX1nTb9GIYL2sNw7YtPtO6AO++9qnt5cNv+bJ4KfKaq7q7h4kffGpm2J/dcdxfgqzVc6e1chl8MmezKOJeh/eakqj5fwy+mPB/4zyOTrmS4tKfuR5bOPovug25r/ZYzOYnhAuy7M1yEZk2uYQi8UVsC1wNU1V3At4FvJzmX4RT+6GnW87dVNflrG7RAnslzGML5ecBbkvzBLDXeBoyu707awUjripj87bvprqc76VnAC0eGJ7th7k5yx8iR892sw35VVacmeViSbVvXyqatbt2PeISs6XwM+PuqOnfWOYc+3+cl2RIgyQsYTu3vSvLIJA8fmXdX4JK5FFBVNwDXjfQHvxz4TpKNgIdU1bcY3qjbCtgCuInhhWA657N6P/nFDEfuMHQ5/E77/3vAC1tf8vYML0iTLw5Lq+qaudQ+V0lWthcEMvyY6MYML3AAj2C4kpzuRzxC1r1U1WUMP0A6l3nPSfI/gO8lKYZT7Ve1yVsAR2X4VeA7GS6bePBalHIA8MH2sbwLgVcwdA8c30IyDP3G1yf5EnBikn2BQ6b0I58K/GOStCPZ/wl8McnpDJ90uKXN91mGaxufx3Dp2NMYfp7pmcA316LuuXohw7WH72A4Gn7xyJH2nzL0K+t+xMtv6n4hyZHAl6pqjcGaZIuqujnJNgzXNn4K8A7gIzX86OeCSHIqsG9VXbdQ29T4Gci6X2hdEE+oqjX+ck2SbzN0g2wMvLuqjp7/6u5Vw3bAU6rqCwu9bY2Xgaw5SfIK4NApo/9vVb1mHPVI90UGsiR1wk9ZSFInDGRJ6oSBLEmdMJAlqRP/Cq1PPDH9djefAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe8acf41be0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TO DO: First question\n",
    "\n",
    "df1 = reading_stats(df_all_cities, [\"city == 'Guangzhou'\", \"year >= 2012\"])\n",
    "df1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"color:blue\">**问题2c**：你获取的数据分别包含多少条记录，统计特征如何？\n",
    "\n",
    "**答案**：*广州2012-2015年的PM2.5数据有35064条数据，其中PM_US Post站点的记录有31455条，缺失的数量并不是很大。\n",
    "2012-2015年间PM2.5值主要分布在0-135ug/m^3这个区间内，平均数值为50.17ug/m^3，中位数为 42.00ug/m^3，有25%的读数小于24.00ug/m^3，有25%的读数大于67.00 ug/m^3。*\n",
    "【考察点：统计基础】"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 数据探索性分析和可视化"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "得到了想要的数据之后，接下来你可以对数据进行探索性分析和可视化了，并报告你的发现！在这部分我们同样为你提供了一个函数`univariate_plot`来对PM 2.5的观测平均值制作柱形图的可视化，下面是关于本函数使用方法的一些提示：\n",
    "\n",
    "1. 第一个参数（必须）：筛选后数据的 dataframe，将从这里分析数据。\n",
    "2. 第二个参数（必须）：数据分析进行的维度，在这里可以填入一个column_name，比如'season', 'month', 'hour'等，对数据进行分组分析。\n",
    "3. 第三个参数（可选）：可视化中柱形的颜色，默认为蓝色，你也可以选择你喜爱的其他颜色，比如red，blue，green等。但是请尽量保证一份可视化报告中图表颜色的一致和整洁性。\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "我们以上海市2012年之后不同月份的PM 2.5的观测平均值为例，使用`univariate_plot`函数绘制了可视化："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe8acf0e208>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "univariate_plot(df_test, 'month', 'grey')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "从本可视化中我们可以看出在较温暖的月份（6-10月）空气中的PM 2.5含量较低，而较寒冷的月份，比如（11-1月）空气中的PM 2.5含量较高。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "接下来，你可以对你提出的问题进行探索了！请使用上面的函数探索一些不同的变量，并记录你发现的一些趋势。如果你想用其他方式或多个方式探索数据集，可自行创建更多的单元格。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe8acecbcc0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TO DO: \n",
    "# please use univariate_plot to visualize your data \n",
    "univariate_plot(df1,'year','green')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "【考察点：如何调用函数】"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"color:blue\">**问题 3**：上述可视化有何有趣的趋势？是否能够回答你的问题？（如果不能，请说明你需要什么信息来帮助你来回答问题）\n",
    "\n",
    "**答案**：广州市2012年PM2.5平均值接近60ug/m^3，到2015年已低于40ug/m^3。因此可以得出2012-2015年PM2.5平均值呈逐年下降趋势。\n",
    "\n",
    "【考察点：数据分析过程 - 可视化的解读，得出结论】"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 结论\n",
    "\n",
    "恭喜你完成了此项目！这只是数据分析过程的一个样本：从生成问题、整理数据到探索数据。通常，在数据分析过程的这个点，你可能想要通过执行统计检验或将数据拟合到一个模型进行预测，来对我们的数据得出结论。还有很多可以对数据执行的潜在分析，但仅靠这里所给的有限代码无法完成。除了结果轴上的PM_US Post的平均值，你还可以观察具有影响的其他特征，如其他站点的PM2.5读数,各种气象数据。我们还未研究过气象数据与PM2.5之间的相关关系。如果你对数据科学方法感兴趣的话，我们鼓励你继续学习后续的课程，掌握更多的数据分析相关的技能！"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"color:blue\">**问题 4**：根据目前你对数据分析的了解，请思考一个可以应用数据科学技术的话题或兴趣领域。你希望使用什么样的数据，来得到什么样的信息？\n",
    "\n",
    "**答案**: 我希望应用数据科学来研究往年深圳春运期间的铁路旅客人流量，根据不同时间的人流量的总数，可以预测出购买春运车票的时间点，从而能更方便的买到春运车票的时间点。\n",
    "\n",
    "【考察点：数据分析师解决的问题】"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 若想与他人分享我们的分析结果，除了向他们提供 jupyter Notebook (.ipynb) 文件的副本外，我们还可以将 Notebook 输出导出为一种甚至那些未安装 Python 的人都能打开的形式。从左上方的“文件 File”菜单，前往“下载为 Download As”子菜单。然后你可以选择一个可以更普遍查看的格式，例如 HTML (.html) 。你可能需要额外软件包或软件来执行这些导出。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "恭喜你完成了这个项目！现在可以提交你的项目了。请按照上面的方法提供jupyter Notebook (.ipynb) 文件和 HTML (.html) 文件，将这两个文件打包成zip文件在后面的项目提交入口进行项目提交。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
